// Code generated by mockery v2.40.1. DO NOT EDIT.

package global_config_mock

import (
	global_config "github.com/pokt-network/gateway-server/internal/global_config"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// GlobalConfigProvider is an autogenerated mock type for the GlobalConfigProvider type
type GlobalConfigProvider struct {
	mock.Mock
}

type GlobalConfigProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *GlobalConfigProvider) EXPECT() *GlobalConfigProvider_Expecter {
	return &GlobalConfigProvider_Expecter{mock: &_m.Mock}
}

// GetAPIKey provides a mock function with given fields:
func (_m *GlobalConfigProvider) GetAPIKey() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAPIKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GlobalConfigProvider_GetAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAPIKey'
type GlobalConfigProvider_GetAPIKey_Call struct {
	*mock.Call
}

// GetAPIKey is a helper method to define mock.On call
func (_e *GlobalConfigProvider_Expecter) GetAPIKey() *GlobalConfigProvider_GetAPIKey_Call {
	return &GlobalConfigProvider_GetAPIKey_Call{Call: _e.mock.On("GetAPIKey")}
}

func (_c *GlobalConfigProvider_GetAPIKey_Call) Run(run func()) *GlobalConfigProvider_GetAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GlobalConfigProvider_GetAPIKey_Call) Return(_a0 string) *GlobalConfigProvider_GetAPIKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GlobalConfigProvider_GetAPIKey_Call) RunAndReturn(run func() string) *GlobalConfigProvider_GetAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetAltruistRequestTimeout provides a mock function with given fields:
func (_m *GlobalConfigProvider) GetAltruistRequestTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAltruistRequestTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GlobalConfigProvider_GetAltruistRequestTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAltruistRequestTimeout'
type GlobalConfigProvider_GetAltruistRequestTimeout_Call struct {
	*mock.Call
}

// GetAltruistRequestTimeout is a helper method to define mock.On call
func (_e *GlobalConfigProvider_Expecter) GetAltruistRequestTimeout() *GlobalConfigProvider_GetAltruistRequestTimeout_Call {
	return &GlobalConfigProvider_GetAltruistRequestTimeout_Call{Call: _e.mock.On("GetAltruistRequestTimeout")}
}

func (_c *GlobalConfigProvider_GetAltruistRequestTimeout_Call) Run(run func()) *GlobalConfigProvider_GetAltruistRequestTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GlobalConfigProvider_GetAltruistRequestTimeout_Call) Return(_a0 time.Duration) *GlobalConfigProvider_GetAltruistRequestTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GlobalConfigProvider_GetAltruistRequestTimeout_Call) RunAndReturn(run func() time.Duration) *GlobalConfigProvider_GetAltruistRequestTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseConnectionUrl provides a mock function with given fields:
func (_m *GlobalConfigProvider) GetDatabaseConnectionUrl() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseConnectionUrl")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GlobalConfigProvider_GetDatabaseConnectionUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseConnectionUrl'
type GlobalConfigProvider_GetDatabaseConnectionUrl_Call struct {
	*mock.Call
}

// GetDatabaseConnectionUrl is a helper method to define mock.On call
func (_e *GlobalConfigProvider_Expecter) GetDatabaseConnectionUrl() *GlobalConfigProvider_GetDatabaseConnectionUrl_Call {
	return &GlobalConfigProvider_GetDatabaseConnectionUrl_Call{Call: _e.mock.On("GetDatabaseConnectionUrl")}
}

func (_c *GlobalConfigProvider_GetDatabaseConnectionUrl_Call) Run(run func()) *GlobalConfigProvider_GetDatabaseConnectionUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GlobalConfigProvider_GetDatabaseConnectionUrl_Call) Return(_a0 string) *GlobalConfigProvider_GetDatabaseConnectionUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GlobalConfigProvider_GetDatabaseConnectionUrl_Call) RunAndReturn(run func() string) *GlobalConfigProvider_GetDatabaseConnectionUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnvironmentStage provides a mock function with given fields:
func (_m *GlobalConfigProvider) GetEnvironmentStage() global_config.EnvironmentStage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironmentStage")
	}

	var r0 global_config.EnvironmentStage
	if rf, ok := ret.Get(0).(func() global_config.EnvironmentStage); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(global_config.EnvironmentStage)
	}

	return r0
}

// GlobalConfigProvider_GetEnvironmentStage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnvironmentStage'
type GlobalConfigProvider_GetEnvironmentStage_Call struct {
	*mock.Call
}

// GetEnvironmentStage is a helper method to define mock.On call
func (_e *GlobalConfigProvider_Expecter) GetEnvironmentStage() *GlobalConfigProvider_GetEnvironmentStage_Call {
	return &GlobalConfigProvider_GetEnvironmentStage_Call{Call: _e.mock.On("GetEnvironmentStage")}
}

func (_c *GlobalConfigProvider_GetEnvironmentStage_Call) Run(run func()) *GlobalConfigProvider_GetEnvironmentStage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GlobalConfigProvider_GetEnvironmentStage_Call) Return(_a0 global_config.EnvironmentStage) *GlobalConfigProvider_GetEnvironmentStage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GlobalConfigProvider_GetEnvironmentStage_Call) RunAndReturn(run func() global_config.EnvironmentStage) *GlobalConfigProvider_GetEnvironmentStage_Call {
	_c.Call.Return(run)
	return _c
}

// GetPoktApplicationsEncryptionKey provides a mock function with given fields:
func (_m *GlobalConfigProvider) GetPoktApplicationsEncryptionKey() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPoktApplicationsEncryptionKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GlobalConfigProvider_GetPoktApplicationsEncryptionKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoktApplicationsEncryptionKey'
type GlobalConfigProvider_GetPoktApplicationsEncryptionKey_Call struct {
	*mock.Call
}

// GetPoktApplicationsEncryptionKey is a helper method to define mock.On call
func (_e *GlobalConfigProvider_Expecter) GetPoktApplicationsEncryptionKey() *GlobalConfigProvider_GetPoktApplicationsEncryptionKey_Call {
	return &GlobalConfigProvider_GetPoktApplicationsEncryptionKey_Call{Call: _e.mock.On("GetPoktApplicationsEncryptionKey")}
}

func (_c *GlobalConfigProvider_GetPoktApplicationsEncryptionKey_Call) Run(run func()) *GlobalConfigProvider_GetPoktApplicationsEncryptionKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GlobalConfigProvider_GetPoktApplicationsEncryptionKey_Call) Return(_a0 string) *GlobalConfigProvider_GetPoktApplicationsEncryptionKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GlobalConfigProvider_GetPoktApplicationsEncryptionKey_Call) RunAndReturn(run func() string) *GlobalConfigProvider_GetPoktApplicationsEncryptionKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetPoktRPCFullHost provides a mock function with given fields:
func (_m *GlobalConfigProvider) GetPoktRPCFullHost() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPoktRPCFullHost")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GlobalConfigProvider_GetPoktRPCFullHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoktRPCFullHost'
type GlobalConfigProvider_GetPoktRPCFullHost_Call struct {
	*mock.Call
}

// GetPoktRPCFullHost is a helper method to define mock.On call
func (_e *GlobalConfigProvider_Expecter) GetPoktRPCFullHost() *GlobalConfigProvider_GetPoktRPCFullHost_Call {
	return &GlobalConfigProvider_GetPoktRPCFullHost_Call{Call: _e.mock.On("GetPoktRPCFullHost")}
}

func (_c *GlobalConfigProvider_GetPoktRPCFullHost_Call) Run(run func()) *GlobalConfigProvider_GetPoktRPCFullHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GlobalConfigProvider_GetPoktRPCFullHost_Call) Return(_a0 string) *GlobalConfigProvider_GetPoktRPCFullHost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GlobalConfigProvider_GetPoktRPCFullHost_Call) RunAndReturn(run func() string) *GlobalConfigProvider_GetPoktRPCFullHost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPoktRPCRequestTimeout provides a mock function with given fields:
func (_m *GlobalConfigProvider) GetPoktRPCRequestTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPoktRPCRequestTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GlobalConfigProvider_GetPoktRPCRequestTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoktRPCRequestTimeout'
type GlobalConfigProvider_GetPoktRPCRequestTimeout_Call struct {
	*mock.Call
}

// GetPoktRPCRequestTimeout is a helper method to define mock.On call
func (_e *GlobalConfigProvider_Expecter) GetPoktRPCRequestTimeout() *GlobalConfigProvider_GetPoktRPCRequestTimeout_Call {
	return &GlobalConfigProvider_GetPoktRPCRequestTimeout_Call{Call: _e.mock.On("GetPoktRPCRequestTimeout")}
}

func (_c *GlobalConfigProvider_GetPoktRPCRequestTimeout_Call) Run(run func()) *GlobalConfigProvider_GetPoktRPCRequestTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GlobalConfigProvider_GetPoktRPCRequestTimeout_Call) Return(_a0 time.Duration) *GlobalConfigProvider_GetPoktRPCRequestTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GlobalConfigProvider_GetPoktRPCRequestTimeout_Call) RunAndReturn(run func() time.Duration) *GlobalConfigProvider_GetPoktRPCRequestTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// NewGlobalConfigProvider creates a new instance of GlobalConfigProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGlobalConfigProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *GlobalConfigProvider {
	mock := &GlobalConfigProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
