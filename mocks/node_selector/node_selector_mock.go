// Code generated by mockery v2.40.1. DO NOT EDIT.

package node_selector_mock

import (
	models "github.com/pokt-network/gateway-server/internal/node_selector_service/models"

	mock "github.com/stretchr/testify/mock"
)

// NodeSelectorService is an autogenerated mock type for the NodeSelectorService type
type NodeSelectorService struct {
	mock.Mock
}

type NodeSelectorService_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeSelectorService) EXPECT() *NodeSelectorService_Expecter {
	return &NodeSelectorService_Expecter{mock: &_m.Mock}
}

// FindNode provides a mock function with given fields: chainId
func (_m *NodeSelectorService) FindNode(chainId string) (*models.QosNode, bool) {
	ret := _m.Called(chainId)

	if len(ret) == 0 {
		panic("no return value specified for FindNode")
	}

	var r0 *models.QosNode
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*models.QosNode, bool)); ok {
		return rf(chainId)
	}
	if rf, ok := ret.Get(0).(func(string) *models.QosNode); ok {
		r0 = rf(chainId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.QosNode)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(chainId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NodeSelectorService_FindNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindNode'
type NodeSelectorService_FindNode_Call struct {
	*mock.Call
}

// FindNode is a helper method to define mock.On call
//   - chainId string
func (_e *NodeSelectorService_Expecter) FindNode(chainId interface{}) *NodeSelectorService_FindNode_Call {
	return &NodeSelectorService_FindNode_Call{Call: _e.mock.On("FindNode", chainId)}
}

func (_c *NodeSelectorService_FindNode_Call) Run(run func(chainId string)) *NodeSelectorService_FindNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *NodeSelectorService_FindNode_Call) Return(_a0 *models.QosNode, _a1 bool) *NodeSelectorService_FindNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeSelectorService_FindNode_Call) RunAndReturn(run func(string) (*models.QosNode, bool)) *NodeSelectorService_FindNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeSelectorService creates a new instance of NodeSelectorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeSelectorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeSelectorService {
	mock := &NodeSelectorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
